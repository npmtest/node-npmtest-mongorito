{"/home/travis/build/npmtest/node-npmtest-mongorito/test.js":"/* istanbul instrument in package npmtest_mongorito */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongorito/lib.npmtest_mongorito.js":"/* istanbul instrument in package npmtest_mongorito */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongorito = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongorito = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongorito/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongorito && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongorito */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongorito\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongorito.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongorito.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongorito.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongorito.__dirname + '/lib.npmtest_mongorito.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongorito/node_modules/mongorito/index.js":"module.exports = require('./lib/mongorito');\n","/home/travis/build/npmtest/node-npmtest-mongorito/node_modules/mongorito/lib/mongorito.js":"'use strict';\n\n/**\n* Dependencies\n*/\n\nconst isGeneratorFn = require('is-generator-fn');\nconst pluralize = require('pluralize');\nconst Promise = require('bluebird');\nconst extend = require('class-extend').extend;\nconst result = require('lodash.result');\nconst assign = require('object-assign');\nconst clone = require('clone');\nconst get = require('get-value');\nconst set = require('set-value');\nconst is = require('is_js');\nconst co = require('co');\n\nlet mongodb = require('mongodb');\nlet MongoClient = mongodb.MongoClient;\n\nconst Query = require('./query');\n\nconst emptyObject = {};\n\n\n/**\n* Mongorito\n*\n* Main class, manages mongodb connection and collections\n*/\n\nfunction Mongorito () {}\n\n/**\n * Sets the driver.\n *\n * @api public\n * @param      {object}  driver  The driver\n */\nMongorito.setDriver = function(driver) {\n\tif (typeof driver !== 'undefined' && typeof driver.MongoClient !== 'undefined') {\n\t\tmongodb = driver;\n\t\tMongoClient = driver.MongoClient;\n\t}\n};\n\n/**\n * Gets the driver.\n *\n * @api public\n * @return     {object}  The driver.\n */\nMongorito.getDriver = function() {\n\treturn mongodb;\n};\n\n/**\n * Connect to a MongoDB database and return connection object\n *\n * @param {String} urls - connection urls (as arguments)\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/MongoClient.html#.connect\n * @api public\n */\n\nMongorito.connect = function () {\n\t// parse arguments\n\tlet args = Array.prototype.slice.call(arguments);\n\n\tlet urls = [];\n\tlet options = {};\n\n\targs.forEach(function (arg) {\n\t\tif (is.string(arg)) {\n\t\t\turls.push(arg);\n\t\t}\n\n\t\tif (is.object(arg)) {\n\t\t\toptions = arg;\n\t\t}\n\t});\n\n\turls = urls.map(function (url) {\n\t\tif (!url.startsWith('mongodb://')) {\n\t\t\turl = 'mongodb://' + url;\n\t\t}\n\n\t\treturn url;\n\t});\n\n\tlet self = this;\n\tlet connection = MongoClient.connect(urls.join(','), options).then(function (db) {\n\t\tif (!self.db) {\n\t\t\tdb.url = urls.join(',');\n\t\t\tself.db = db;\n\t\t}\n\n\t\treturn db;\n\t});\n\n\tif (!this._connection) {\n\t\tthis._connection = connection;\n\t}\n\n\treturn connection;\n};\n\n\n/**\n * Disconnect from a database\n *\n * @api public\n */\n\nMongorito.disconnect = function () {\n\treturn this.db.close();\n};\n\n\n/**\n * Alias for .disconnect()\n *\n * @api public\n */\n\nMongorito.close = function () {\n\treturn Mongorito.disconnect.apply(this, arguments);\n};\n\n\n/**\n * Return a co-wrapped monk collection\n *\n * @api private\n */\n\nMongorito._collection = function (db, name) {\n\tlet url = db.url;\n\tlet collections = this._collections[url];\n\n\tif (!collections) {\n\t\tcollections = this._collections[url] = {};\n\t}\n\n\tif (collections[name]) {\n\t\treturn collections[name];\n\t}\n\n\tlet collection = db.collection(name);\n\n\tcollections[name] = collection;\n\n\treturn collections[name];\n};\n\n\n/**\n * Cache for collections\n *\n * @api private\n */\n\nMongorito._collections = {};\n\n\n/**\n* Model\n*/\n\nfunction Model (attrs, options) {\n\tthis.attributes = assign({}, attrs);\n\tthis.changed = {};\n\tthis.previous = {};\n\tthis.options = options || {};\n\n\t// reset hooks\n\tObject.defineProperty(this, '_hooks', {\n\t\tvalue: {\n\t\t\tbefore: {\n\t\t\t\tcreate: [],\n\t\t\t\tupdate: [],\n\t\t\t\tremove: [],\n\t\t\t\tsave: []\n\t\t\t},\n\t\t\tafter: {\n\t\t\t\tcreate: [],\n\t\t\t\tupdate: [],\n\t\t\t\tremove: [],\n\t\t\t\tsave: []\n\t\t\t}\n\t\t},\n\t\tenumerable: false\n\t});\n\n\t// run custom per-model configuration\n\tthis.configure();\n}\n\n\n/**\n * Get collection for current model\n *\n * @api private\n */\n\nModel.prototype._collection = function () {\n\tlet self = this;\n\n\treturn this._db().then(function (db) {\n\t\tif (is.string(self.collection)) {\n\t\t\treturn Mongorito._collection(db, self.collection);\n\t\t}\n\n\t\t// get collectio name\n\t\t// from the \"collection\" property\n\t\t// or generate the default one\n\t\tlet defaultName = pluralize(self.constructor.name).toLowerCase();\n\t\tlet name = result(self, 'collection', defaultName);\n\n\t\t// save collection name\n\t\t// to avoid the same check in future\n\t\tself.collection = self.constructor.prototype.collection = name;\n\n\t\treturn Mongorito._collection(db, self.collection);\n\t});\n};\n\n\n/**\n * Get database for current model\n *\n * @api private\n */\n\nModel.prototype._db = function () {\n\t// use either custom database\n\t// specified for this model\n\t// or use a default one\n\tlet db = this.db ? this.db() : Mongorito._connection;\n\n\treturn Promise.resolve(db);\n};\n\n\n/**\n * Get model attribute\n *\n * @param {String} key - property name\n * @api public\n */\n\nModel.prototype.get = function (key) {\n\t// if key is empty\n\t// return all attributes\n\tlet value = key ? get(this.attributes, key) : this.attributes;\n\n\t// if value is object\n\t// return a deep copy\n\treturn value && value.constructor === Object ? clone(value) : value;\n};\n\n\n/**\n * Set model attribute\n *\n * @param {String} key - property name\n * @param {Mixed} value - property value\n * @api public\n */\n\nModel.prototype.set = function (key, value) {\n\t// if object passed instead of key-value pair\n\t// iterate and call set on each item\n\tif (is.object(key)) {\n\t\tlet attrs = key;\n\t\tlet keys = Object.keys(attrs);\n\n\t\tlet self = this;\n\n\t\tkeys.forEach(function (key) {\n\t\t\tself.set(key, attrs[key]);\n\t\t});\n\n\t\treturn;\n\t}\n\n\t// check if the value actually changed\n\tlet previousValue = this.get(key);\n\n\tif (previousValue !== value) {\n\t\tset(this.previous, key, previousValue);\n\t\tset(this.attributes, key, value);\n\t\tset(this.changed, key, true);\n\t}\n\n\treturn value;\n};\n\n\n/**\n * Unset model attribute\n *\n * @param {String} key - property name\n * @api public\n */\n\nModel.prototype.unset = function (key) {\n\tthis.set(key, undefined);\n};\n\n\n/**\n * Set default values\n *\n * @api private\n */\n\nModel.prototype._setDefaults = function () {\n\tlet defaults = result(this, 'defaults', {});\n\tlet keys = Object.keys(defaults);\n\n\tlet self = this;\n\n\tkeys.forEach(function (key) {\n\t\tlet defaultValue = defaults[key];\n\t\tlet actualValue = self.get(key);\n\n\t\tif (is.undefined(actualValue)) {\n\t\t\tself.set(key, defaultValue);\n\t\t}\n\t});\n};\n\n\n/**\n * Get all attributes\n *\n * @api public\n */\n\nModel.prototype.toJSON = function () {\n\treturn assign({}, this.attributes);\n};\n\n\n/**\n * Configure model (usually, set hooks here)\n * Supposed to be overriden\n *\n * @api public\n */\n\nModel.prototype.configure = function () {};\n\n\n/**\n * Add hooks\n *\n * @api private\n */\n\nModel.prototype.hook = function (when, action, method) {\n\tlet self = this;\n\n\t// if object is given\n\t// iterate and call .hook()\n\t// for each entry\n\tif (is.object(when)) {\n\t\tlet hooks = when;\n\t\tlet keys = Object.keys(hooks);\n\n\t\tkeys.forEach(function (key) {\n\t\t\tlet parts = key.split(':');\n\t\t\tlet when = parts[0];\n\t\t\tlet action = parts[1];\n\t\t\tlet method = hooks[key];\n\n\t\t\tself.hook(when, action, method);\n\t\t});\n\n\t\treturn;\n\t}\n\n\t// if array is given\n\t// iterate and call .hook()\n\t// for each item\n\tif (Array.isArray(method)) {\n\t\tlet methods = method;\n\n\t\tmethods.forEach(function (method) {\n\t\t\treturn self.hook(when, action, method);\n\t\t});\n\n\t\treturn;\n\t}\n\n\t// if method is a string\n\t// get the function\n\tif (is.not.function(method)) {\n\t\tlet name = method;\n\n\t\tmethod = this[method];\n\n\t\tif (!method.name) {\n\t\t\tmethod.name = name;\n\t\t}\n\t}\n\n\t// if method is a generator function\n\t// convert it to promise\n\tif (isGeneratorFn(method)) {\n\t\tmethod = co.wrap(method);\n\t}\n\n\t// around hooks should be\n\t// at the end of before:*\n\t// at the beginning of after:*\n\tif (when === 'around') {\n\t\tthis._hooks.before[action].push(method);\n\t\tthis._hooks.after[action].unshift(method);\n\t} else {\n\t\tthis._hooks[when][action].push(method);\n\t}\n};\n\n\n/**\n * Add multiple hooks at once\n *\n * @api public\n */\n\nModel.prototype.hooks = function () {\n\treturn this.hook.apply(this, arguments);\n};\n\n\n/**\n * Add before:* hook\n *\n * @param {String} action - before what\n * @param {String} method - hook name\n * @api public\n */\n\nModel.prototype.before = function (action, method) {\n\tthis.hook('before', action, method);\n};\n\n\n/**\n * Add after:* hook\n *\n * @param {String} action - after what\n * @param {String} method - hook name\n * @api public\n */\n\nModel.prototype.after = function (action, method) {\n\tthis.hook('after', action, method);\n};\n\n\n/**\n * Add around:* hook\n *\n * @param {String} action - around what\n * @param {String} method - hook name\n * @api public\n */\n\nModel.prototype.around = function (action, method) {\n\tthis.hook('around', action, method);\n};\n\n\n/**\n * Execute hooks\n *\n * @api private\n */\n\nModel.prototype._runHooks = function (when, action, options) {\n\tlet self = this;\n\n\tif (!options) {\n\t\toptions = {};\n\t}\n\n\tlet hooks = this._getHooks(when, action);\n\n\t// skip hooks\n\tlet skip = options.skip;\n\n\tif (skip) {\n\t\tif (is.string(skip)) {\n\t\t\tskip = [skip];\n\t\t}\n\n\t\thooks = hooks.filter(function (fn) {\n\t\t\t// generator functions are wrapped using co.wrap()\n\t\t\t// which hides the real function name, so we need\n\t\t\t// to get function name ourselves\n\t\t\tlet fnName = fn.__generatorFunction__ ? fn.__generatorFunction__.name : fn.name;\n\n\t\t\treturn skip.indexOf(fnName) === -1;\n\t\t});\n\t}\n\n\treturn Promise.each(hooks, function (hook) {\n\t\treturn hook.call(self);\n\t});\n};\n\n\n/**\n * Get hooks for a given operation\n *\n * @api private\n */\n\nModel.prototype._getHooks = function (when, action) {\n\tlet hooks = this._hooks[when][action] || [];\n\n\t// if create or update hooks requested\n\t// prepend save hooks also\n\tif (action === 'create' || action === 'update') {\n\t\thooks = hooks.concat(this._hooks[when].save);\n\t}\n\n\treturn hooks;\n};\n\n\n/**\n * Save a model\n *\n * @param {Object} options - options for save operation\n * @api public\n */\n\nModel.prototype.save = function (options) {\n\t// set default values if needed\n\tthis._setDefaults();\n\n\tlet id = this.get('_id');\n\tlet fn = id ? this.update : this.create;\n\n\tif (!options) {\n\t\toptions = {};\n\t}\n\n\t// revert populated documents to _id's\n\tlet populate = this.options.populate || emptyObject;\n\tlet keys = Object.keys(populate);\n\n\tlet self = this;\n\n\tkeys.forEach(function (key) {\n\t\tlet value = self.get(key);\n\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue = value.map(function (doc) {\n\t\t\t\treturn doc.get('_id');\n\t\t\t});\n\t\t} else {\n\t\t\tvalue = value.get('_id');\n\t\t}\n\n\t\tself.set(key, value);\n\t});\n\n\treturn fn.call(this, options);\n};\n\n\n/**\n * Create a model\n *\n * @api private\n */\n\nModel.prototype.create = function (options) {\n\tlet self = this;\n\n\tlet attrs = this.attributes;\n\tlet date = new Date();\n\n\tthis.set({\n\t\t'created_at': date,\n\t\t'updated_at': date\n\t});\n\n\treturn this._collection()\n\t\t.tap(function () {\n\t\t\treturn self._runHooks('before', 'create', options);\n\t\t})\n\t\t.then(function (collection) {\n\t\t\treturn collection.insert(attrs);\n\t\t})\n\t\t.then(function (inserted) {\n\t\t\tlet doc = inserted.ops[0];\n\n\t\t\tself.set('_id', doc._id);\n\t\t})\n\t\t.then(function () {\n\t\t\treturn self._runHooks('after', 'create', options);\n\t\t})\n\t\t.return(this);\n};\n\n\n/**\n * Update a model\n *\n * @api private\n */\n\nModel.prototype.update = function (options) {\n\tlet self = this;\n\n\tlet attrs = this.attributes;\n\n\tthis.set('updated_at', new Date());\n\n\treturn this._collection()\n\t\t.tap(function () {\n\t\t\treturn self._runHooks('before', 'update', options);\n\t\t})\n\t\t.then(function (collection) {\n\t\t\treturn collection.update({ _id: attrs._id }, attrs);\n\t\t})\n\t\t.then(function () {\n\t\t\treturn self._runHooks('after', 'update', options);\n\t\t})\n\t\t.return(this);\n};\n\n\n/**\n * Remove a model\n *\n * @api private\n */\n\nModel.prototype.remove = function (options) {\n\tlet self = this;\n\n\treturn this._collection()\n\t\t.tap(function () {\n\t\t\treturn self._runHooks('before', 'remove', options);\n\t\t})\n\t\t.then(function (collection) {\n\t\t\treturn collection.remove({ _id: self.get('_id') });\n\t\t})\n\t\t.then(function () {\n\t\t\treturn self._runHooks('after', 'remove', options);\n\t\t})\n\t\t.return(this);\n};\n\n\n/**\n * Atomically increment a model property\n *\n * @param {Object} props - set of properties and values\n * @param {Object} options - options for update operation\n * @api public\n */\n\nModel.prototype.inc = function (props, options) {\n\tlet self = this;\n\n\tlet id = this.get('_id');\n\n\tif (!id) {\n\t\tthrow new Error('Can\\'t atomically increment a property of unsaved document.');\n\t}\n\n\treturn this._collection()\n\t\t.tap(function () {\n\t\t\treturn self._runHooks('before', 'update', options);\n\t\t})\n\t\t.then(function (collection) {\n\t\t\treturn collection.update({ _id: id }, { '$inc': props });\n\t\t})\n\t\t.then(function () {\n\t\t\t// perform increment locally\n\t\t\t// to prevent the need to refresh\n\t\t\t// the model from a database\n\t\t\tObject.keys(props).forEach(function (key) {\n\t\t\t\t// get current value\n\t\t\t\tlet value = self.get(key);\n\n\t\t\t\t// perform increment\n\t\t\t\tvalue += props[key];\n\n\t\t\t\t// save\n\t\t\t\tself.set(key, value);\n\t\t\t});\n\t\t})\n\t\t.then(function () {\n\t\t\treturn self._runHooks('after', 'update', options);\n\t\t})\n\t\t.return(this);\n};\n\n\n/**\n * Get database for a model\n *\n * @api private\n */\n\nModel._db = function () {\n\t// support for multiple connections\n\t// if model has a custom database assigned\n\t// use it, otherwise use the default\n\tlet db = this.prototype.db ? this.prototype.db() : Mongorito._connection;\n\n\treturn Promise.resolve(db);\n};\n\n\n/**\n * Get collection for a model\n *\n * @api private\n */\n\nModel._collection = function () {\n\tlet self = this;\n\n\treturn this._db().then(function (db) {\n\t\tif (is.string(self.prototype.collection)) {\n\t\t\treturn Mongorito._collection(db, self.prototype.collection);\n\t\t}\n\n\t\t// get collection name\n\t\t// from the \"collection\" property\n\t\t// or generate the default one\n\t\tlet defaultName = pluralize(self.name).toLowerCase();\n\t\tlet name = result(self.prototype, 'collection', defaultName);\n\n\t\t// save collection name\n\t\t// to avoid the same check in future\n\t\tself.prototype.collection = name;\n\n\t\treturn Mongorito._collection(db, name);\n\t});\n};\n\n\n/**\n * Find documents\n *\n * @param {Object} query - find conditions, same as this.where()\n * @api public\n */\n\nModel.find = function (query) {\n\t// collection, model\n\treturn new Query(this._collection(), this).find(query);\n};\n\n\n/**\n * Count documents\n *\n * @param {Object} query - find conditions, same as this.where()\n * @api public\n */\n\nModel.count = function (query) {\n\t// collection, model\n\treturn new Query(this._collection(), this).count(query);\n};\n\n/**\n * Get distinct\n *\n * @param {String} field for distinct\n * @param {Object} query - query to filter the results\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#distinct\n * @api public\n */\n\nModel.distinct = function (field, query) {\n\t// collection, model\n\treturn new Query(this._collection(), this).distinct(field, query);\n};\n\n\n/**\n * Aggregation query\n *\n * @param {String} pipeline aggregation pipeline\n * @param {Object} options - Options to be passed to aggregation pipeline\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#distinct\n * @api public\n */\n\nModel.aggregate = function (pipeline) {\n\treturn new Query(this._collection(), this).aggregate(pipeline);\n};\n\n\n\n/**\n * Find all documents in a collection\n *\n * @api public\n */\n\nModel.all = function () {\n\treturn this.find();\n};\n\n\n/**\n * Find one document\n *\n * @param {Object} query - find conditions, same as this.where()\n * @api public\n */\n\nModel.findOne = function (query) {\n\treturn new Query(this._collection(), this).findOne(query);\n};\n\n\n/**\n * Find a document by ID\n *\n * @param {ObjectID} id - document id\n * @api public\n */\n\nModel.findById = function (id) {\n\treturn new Query(this._collection(), this).findById(id);\n};\n\n\n/**\n * Remove documents\n *\n * @param {Object} query - remove conditions, same as this.where()\n * @api public\n */\n\nModel.remove = function (query) {\n\t// collection, model\n\treturn new Query(this._collection(), this).remove(query);\n};\n\n\n/**\n * Drop collection\n *\n * @api public\n */\n\nModel.drop = function () {\n\treturn this._collection().then(function (collection) {\n\t\treturn collection.drop();\n\t});\n};\n\n\n/**\n * Set up an index\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/Db.html#ensureIndex\n * @api public\n */\n\nModel.index = function () {\n\tlet args = Array.prototype.slice.call(arguments);\n\n\treturn this._collection().then(function (collection) {\n\t\treturn collection.ensureIndex.apply(collection, args);\n\t});\n};\n\n\n/**\n * List all indexes\n *\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#listIndexes\n * @api public\n */\n\nModel.indexes = function () {\n\tlet args = Array.prototype.slice.call(arguments);\n\n\treturn this._collection().then(function (collection) {\n\t\tlet cursor = collection.listIndexes.apply(collection, args);\n\n\t\treturn cursor\n\t\t\t.toArray()\n\t\t\t.then(function (indexes) {\n\t\t\t\tcursor.close();\n\n\t\t\t\treturn indexes;\n\t\t\t});\n\t});\n};\n\n// Setting up functions that have\n// the same implementation\n// and act as a bridge to Query\nconst methods = [\n\t'where',\n\t'limit',\n\t'skip',\n\t'sort',\n\t'exists',\n\t'lt',\n\t'lte',\n\t'gt',\n\t'gte',\n\t'in',\n\t'nin',\n\t'and',\n\t'or',\n\t'ne',\n\t'nor',\n\t'populate',\n\t'matches',\n\t'match',\n\t'include',\n\t'exclude',\n\t'search'\n];\n\nmethods.forEach(function (method) {\n\tModel[method] = function () {\n\t\t// collection, model\n\t\tlet query = new Query(this._collection(), this);\n\t\tquery[method].apply(query, arguments);\n\n\t\treturn query;\n\t};\n});\n\nModel.extend = extend;\n\n\n/**\n* Expose Mongorito\n*/\n\nexports = module.exports = Mongorito;\n\nexports.Model = Model;\n\nObject.keys(mongodb).forEach(function (key) {\n\tif (['connect', 'MongoClient', 'Db'].indexOf(key) === -1) {\n\t\texports[key] = mongodb[key];\n\t}\n});\n","/home/travis/build/npmtest/node-npmtest-mongorito/node_modules/mongorito/lib/query.js":"'use strict';\n\n/**\n* Dependencies\n*/\n\nconst toObjectId = require('../util/to-objectid');\nconst Promise = require('bluebird');\nconst assign = require('object-assign');\nconst is = require('is_js');\n\n\n/**\n* Query\n*/\n\nfunction Query (collection, model, key) {\n\tthis.collection = collection;\n\tthis.model = model;\n\tthis.query = {};\n\tthis.options = {\n\t\tpopulate: {},\n\t\tsort: {},\n\t\tfields: {}\n\t};\n\tthis.lastKey = key;\n}\n\n\n/**\n * Set \"where\" condition\n *\n * @param {String} key - key\n * @param {Mixed} value - value\n * @api public\n */\n\nQuery.prototype.where = function (key, value) {\n\t// if object was passed instead of key-value pair\n\t// iterate over that object and call .where(key, value)\n\tif (is.object(key)) {\n\t\tlet conditions = key;\n\t\tlet keys = Object.keys(conditions);\n\t\tlet self = this;\n\n\t\tkeys.forEach(function (key) {\n\t\t\tself.where(key, conditions[key]);\n\t\t});\n\t}\n\n\tif (is.string(key)) {\n\t\t// if only one argument was supplied\n\t\t// save the key in this.lastKey\n\t\t// for future methods, like .equals()\n\t\tif (is.undefined(value)) {\n\t\t\tthis.lastKey = key;\n\t\t\treturn this;\n\t\t}\n\n\t\t// if value is a regular expression\n\t\t// use $regex modifier\n\t\tif (is.regexp(value)) {\n\t\t\tvalue = { $regex: value };\n\t\t}\n\n\t\tif (is.array(value)) {\n\t\t\tvalue = { $in: value };\n\t\t}\n\n\t\tthis.query[key] = value;\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Match documents using $elemMatch\n *\n * @param {String} key\n * @param {Object} value\n * @api public\n */\n\nQuery.prototype.matches = function (key, value) {\n\tif (this.lastKey) {\n\t\tvalue = key;\n\t\tkey = this.lastKey;\n\t\tthis.lastKey = null;\n\t}\n\n\tthis.query[key] = { $elemMatch: value };\n\n\treturn this;\n};\n\nQuery.prototype.match = function () {\n\treturn this.matches.apply(this, arguments);\n};\n\n\n/**\n * Include fields in a result\n *\n * @param {String} key\n * @param {Mixed} value\n * @api public\n */\n\nQuery.prototype.include = function (key, value) {\n\tlet self = this;\n\n\tif (Array.isArray(key)) {\n\t\tlet fields = key;\n\n\t\tfields.forEach(function (key) {\n\t\t\tself.include(key);\n\t\t});\n\t} else if (is.object(key)) {\n\t\tlet fields = key;\n\t\tlet keys = Object.keys(fields);\n\n\t\tkeys.forEach(function (key) {\n\t\t\tself.include(key, fields[key]);\n\t\t});\n\t}\n\n\tif (is.string(key)) {\n\t\tthis.options.fields[key] = value === undefined ? 1 : value;\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Exclude fields from result\n *\n * @param {String} key\n * @param {String} value\n * @api public\n */\n\nQuery.prototype.exclude = function (key, value) {\n\tlet self = this;\n\n\tif (Array.isArray(key)) {\n\t\tlet fields = key;\n\n\t\tfields.forEach(function (key) {\n\t\t\tself.exclude(key);\n\t\t});\n\t} else if (is.object(key)) {\n\t\tlet fields = key;\n\t\tlet keys = Object.keys(fields);\n\n\t\tkeys.forEach(function (key) {\n\t\t\tself.exclude(key, fields[key]);\n\t\t});\n\t}\n\n\tif (is.string(key)) {\n\t\tthis.options.fields[key] = value === undefined ? 0 : value;\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Search using text index\n *\n * @param {String} text\n * @api public\n */\n\nQuery.prototype.search = function (text) {\n\tthis.where({\n\t\t'$text': {\n\t\t\t'$search': text\n\t\t}\n\t});\n\n\treturn this;\n};\n\n/**\n * Get distinct\n *\n * @param {String} field for distinct\n * @param {Object} query - query to filter the results\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#distinct\n * @api public\n */\n\nQuery.prototype.distinct = function (field, query) {\n\tlet self = this;\n\tthis.where(query);\n\treturn this.collection.then(function (collection) {\n\t\treturn collection.distinct(field, self.query);\n\t});\n};\n\n/**\n * Aggregation query\n *\n * @param {String} pipeline aggregation pipeline\n * @param {Object} options - Options to be passed to aggregation pipeline\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#aggregate\n * @api public\n */\n\nQuery.prototype.aggregate = function (pipeline) {\n\treturn this.collection.then(function (collection) {\n\t\tlet cursor = collection.aggregate(pipeline, { cursor: { batchSize: 1 } });\n\t\treturn cursor\n\t\t\t.toArray()\n\t\t\t.then(function (docs) {\n\t\t\t\tcursor.close();\n\t\t\t\treturn docs;\n\t\t\t});\n\t});\n};\n\n\n\n\n/**\n * Set query limit\n *\n * @param {Number} limit - limit number\n * @api public\n */\n\nQuery.prototype.limit = function (limit) {\n\tthis.options.limit = limit;\n\n\treturn this;\n};\n\n\n/**\n * Set query skip\n *\n * @param {Number} skip - skip number\n * @api public\n */\n\nQuery.prototype.skip = function (skip) {\n\tthis.options.skip = skip;\n\n\treturn this;\n};\n\n\n/**\n * Sort query results\n *\n * @param {Object} sort - sort params\n * @see http://mongodb.github.io/node-mongodb-native/2.0/api/Cursor.html#sort\n * @api public\n */\n\nQuery.prototype.sort = function (key, value) {\n\tif (is.object(key)) {\n\t\tassign(this.options.sort, key);\n\t}\n\n\tif (is.string(key) && value) {\n\t\tthis.options.sort[key] = value;\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Same as .where(), only less flexible\n *\n * @param {String} key - key\n * @param {Mixed} value - value\n * @api public\n */\n\nQuery.prototype.equals = function (value) {\n\tlet key = this.lastKey;\n\n\tthis.lastKey = null;\n\n\tthis.query[key] = value;\n\n\treturn this;\n};\n\n\n/**\n * Set property that must or mustn't exist in resulting docs\n *\n * @param {String} key - key\n * @param {Boolean} exists - exists or not\n * @api public\n */\n\nQuery.prototype.exists = function (key, exists) {\n\tif (this.lastKey) {\n\t\texists = key;\n\t\tkey = this.lastKey;\n\t\tthis.lastKey = null;\n\t}\n\n\tthis.query[key] = { $exists: (exists === undefined ? true : exists) };\n\n\treturn this;\n};\n\n\n/**\n * Query population\n *\n * @param {String} key - key\n * @param {Model} model - model to populate with\n * @see http://mongorito.com/guides/query-population/\n * @api public\n */\n\nQuery.prototype.populate = function (key, model) {\n\tthis.options.populate[key] = model;\n\n\treturn this;\n};\n\n\n/**\n * Count documents\n *\n * @param {Object} query - find conditions, same as this.where()\n * @api public\n */\n\nQuery.prototype.count = function (query) {\n\tlet self = this;\n\n\tthis.where(query);\n\n\treturn this.collection.then(function (collection) {\n\t\treturn collection.count(self.query);\n\t});\n};\n\n\n/**\n * Find documents\n *\n * @param {Object} query - find conditions, same as this.where()\n * @api public\n */\n\nQuery.prototype.find = function (query, options) {\n\tlet Model = this.model;\n\n\tquery = assign({}, this.query, query);\n\n\t// query options\n\toptions = assign({}, this.options, options);\n\n\t// fields to populate\n\tlet populate = Object.keys(options.populate);\n\n\t// ensure _id is ObjectId\n\tif (query._id) {\n\t\tif (is.object(query._id)) {\n\t\t\tif (query._id.$in) {\n\t\t\t\tlet convertedIds = [];\n\n\t\t\t\tquery._id.$in.forEach(function (id) {\n\t\t\t\t\tconvertedIds.push(toObjectId(id));\n\t\t\t\t});\n\n\t\t\t\tquery._id.$in = convertedIds;\n\t\t\t}\n\t\t} else {\n\t\t\tquery._id = toObjectId(query._id);\n\t\t}\n\t}\n\n\t// find\n\treturn this.collection\n\t\t.then(function (collection) {\n\t\t\tlet cursor = collection.find(query, options);\n\n\t\t\treturn cursor\n\t\t\t\t.toArray()\n\t\t\t\t.then(function (docs) {\n\t\t\t\t\tcursor.close();\n\n\t\t\t\t\treturn docs;\n\t\t\t\t});\n\t\t})\n\t\t.map(function (doc) {\n\t\t\treturn Promise.each(populate, function (key) {\n\t\t\t\tlet childModel = options.populate[key];\n\t\t\t\tlet idsArray = doc[key];\n\n\t\t\t\tlet promise = childModel.findById(idsArray);\n\n\t\t\t\treturn promise.then(function (subdocs) {\n\t\t\t\t\t// reorder the received documents as ordered in the IDs Array\n\t\t\t\t\tlet orderedDocuments = idsArray.slice();\n\t\t\t\t\tsubdocs.map(doc => {\n\t\t\t\t\t\tlet id = toObjectId(doc.get('_id'));\n\t\t\t\t\t\tfor (let index in idsArray) {\n\t\t\t\t\t\t\tif (idsArray[index].equals && idsArray[index].equals(id)) {\n\t\t\t\t\t\t\t\torderedDocuments[index] = doc;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tdoc[key] = orderedDocuments;\n\t\t\t\t});\n\t\t\t}).then(function () {\n\t\t\t\treturn new Model(doc, {\n\t\t\t\t\tpopulate: options.populate\n\t\t\t\t});\n\t\t\t});\n\t\t});\n};\n\n\n/**\n * Find one document\n *\n * @param {Object} query - find conditions, same as this.where()\n * @api public\n */\n\nQuery.prototype.findOne = function (query) {\n\treturn this.find(query)\n\t\t.then(function (docs) {\n\t\t\treturn docs[0];\n\t\t});\n};\n\n\n/**\n * Find documents by ID\n *\n * @param {ObjectID} id - document id or Array of document ids\n * @api public\n */\n\nQuery.prototype.findById = function (id) {\n\tif (Array.isArray(id)) {\n\t\tlet ids = id.map(id => toObjectId(id));\n\t\treturn this.find({ _id: { $in: ids } });\n\t}\n\treturn this.findOne({ _id: toObjectId(id) });\n};\n\n\n/**\n * Remove documents\n *\n * @param {Object} query - remove conditions, same as this.where()\n * @api public\n */\n\nQuery.prototype.remove = function (query) {\n\tlet self = this;\n\n\tthis.where(query);\n\n\treturn this.collection.then(function (collection) {\n\t\treturn collection.remove(self.query, self.options);\n\t});\n};\n\n// Setting up functions that\n// have the same implementation\nconst methods = [\n\t'lt',\n\t'lte',\n\t'gt',\n\t'gte',\n\t'in',\n\t'nin',\n\t'ne'\n];\n\nmethods.forEach(function (method) {\n\tQuery.prototype[method] = function (key, value) {\n\t\t// if .where() was called with one argument\n\t\t// key was already set in this.lastKey\n\t\tif (this.lastKey) {\n\t\t\tvalue = key;\n\t\t\tkey = this.lastKey;\n\t\t\tthis.lastKey = null;\n\t\t}\n\n\t\tlet operator = '$' + method;\n\t\tlet hasValue = value !== undefined;\n\n\t\tif (hasValue) {\n\t\t\tthis.query[key] = {};\n\t\t\tthis.query[key][operator] = value;\n\t\t} else {\n\t\t\tthis.query[operator] = key;\n\t\t}\n\n\t\treturn this;\n\t};\n});\n\n// or, nor and and share the same imlpementation\n['or', 'nor', 'and'].forEach(function (method) {\n\tQuery.prototype[method] = function () {\n\t\tlet args = Array.isArray(arguments[0]) ? arguments[0] : Array.prototype.slice.call(arguments);\n\t\tlet operator = '$' + method;\n\n\t\tthis.query[operator] = args;\n\n\t\treturn this;\n\t};\n});\n\n\n/**\n * Expose Query\n */\n\nmodule.exports = Query;\n","/home/travis/build/npmtest/node-npmtest-mongorito/node_modules/mongorito/util/to-objectid.js":"'use strict';\n\n/**\n * Dependencies\n */\n\nconst ObjectId = require('mongodb').ObjectId;\n\n\n/**\n * Expose `to-objectid`\n */\n\nmodule.exports = toObjectId;\n\n\n/**\n * Ensure that ids are always instances of ObjectId\n */\n\nfunction toObjectId (id) {\n\tif (id instanceof ObjectId) {\n\t\treturn id;\n\t}\n\n\treturn new ObjectId(id);\n}\n"}